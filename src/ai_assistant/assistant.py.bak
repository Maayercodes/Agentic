from openai import AsyncOpenAI
from typing import List, Dict, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import desc, func
from datetime import datetime
import os
import json
import requests
from dotenv import load_dotenv
from loguru import logger
from ..database.models import Daycare, Influencer, Region, Platform
from ..outreach.email_sender import EmailSender
import asyncio

load_dotenv()

class AIAssistant:
    def __init__(self, session: Session):
        self.session = session
        
        # Load environment variables with logging
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            logger.warning("OPENAI_API_KEY environment variable is not set")
        
        self.model = os.getenv('OPENAI_MODEL', "gpt-3.5-turbo")
        logger.info(f"Using OpenAI model: {self.model}")
        
        self.max_retries = int(os.getenv('MAX_RETRIES', 3))
        logger.info(f"Maximum retry attempts set to: {self.max_retries}")
        
        self.retry_delay = 1  # Initial delay in seconds
        
        # Check for custom base URL
        self.openai_base_url = os.getenv('OPENAI_BASE_URL')
        if self.openai_base_url:
            logger.info(f"Using custom OpenAI base URL: {self.openai_base_url}")
        else:
            logger.info("Using default OpenAI API endpoint")
        
        # Check for deployment environment
        self.is_railway = os.getenv('RAILWAY_ENVIRONMENT') is not None
        if self.is_railway:
            logger.info("Detected Railway deployment environment")
            logger.info("Ensuring outbound connections are properly configured for Railway")
        
        # Validate API key format
        is_valid = self._validate_api_key()
        if not is_valid:
            logger.warning("Proceeding with invalid API key configuration - operations will likely fail")
        
        # Initialize the OpenAI client with optional base URL
        try:
            if self.openai_base_url:
                self.client = AsyncOpenAI(api_key=self.openai_api_key, base_url=self.openai_base_url)
            else:
                self.client = AsyncOpenAI(api_key=self.openai_api_key)
            logger.info("Successfully initialized OpenAI client")
        except Exception as e:
            logger.error(f"Failed to initialize OpenAI client: {type(e).__name__}: {str(e)}")
            # Still create the client to avoid NoneType errors, but operations will fail
            if self.openai_base_url:
                self.client = AsyncOpenAI(api_key=self.openai_api_key or "invalid-key", base_url=self.openai_base_url)
            else:
                self.client = AsyncOpenAI(api_key=self.openai_api_key or "invalid-key")
            
        self.email_sender = EmailSender(session)
        
    async def _check_api_connectivity(self):
        """Check if we can connect to the OpenAI API."""
        try:
            # Make a minimal API call to check connectivity
            response = await self.client.models.list()
            logger.info("Successfully connected to OpenAI API")
            return True
        except requests.exceptions.ConnectionError as e:
            logger.error(f"Failed to connect to OpenAI API: {str(e)}")
            logger.warning("This could be due to network issues, firewall restrictions, or incorrect API base URL")
            
            # Check if we're on Railway
            if self.is_railway:
                logger.warning("Railway deployment detected - this may be due to Railway's outbound connection restrictions")
                logger.info("Railway may require additional configuration to allow outbound connections to api.openai.com")
            
            return False
        except requests.exceptions.RequestException as e:
            logger.error(f"API request failed: {str(e)}")
            logger.warning("This could be due to rate limiting, invalid authentication, or service outage")
            return False
        except Exception as e:
            logger.error(f"Error checking OpenAI API connectivity: {type(e).__name__}: {str(e)}")
            return False
            
    # Alias for backward compatibility
    async def check_api_connectivity(self):
        """Alias for _check_api_connectivity for backward compatibility."""
        return await self._check_api_connectivity()
        
    def _validate_api_key(self):
        """Validate the OpenAI API key format and log appropriate warnings."""
        # Check if API key is set in environment
        if not self.openai_api_key:
            logger.warning("OpenAI API key is not set. Please check your .env file or environment variables.")
            logger.info("Make sure OPENAI_API_KEY is properly set in your environment or .env file.")
            return False
            
        # Check if API key is empty
        if self.openai_api_key.strip() == "":
            logger.warning("OpenAI API key is empty. Please check your .env file or environment variables.")
            logger.info("The OPENAI_API_KEY environment variable exists but contains no value.")
            return False
            
        # Check for common API key format patterns
        if not self.openai_api_key.startswith("sk-"):
            logger.warning("OpenAI API key has incorrect format. It should start with 'sk-'.")
            logger.info("Your API key appears to be malformed. Please check for typos or incorrect copying.")
            return False
            
        if len(self.openai_api_key) < 40:  # Most OpenAI keys are longer than this
            logger.warning("OpenAI API key appears too short. Standard keys are at least 40 characters.")
            logger.info("Your API key may be truncated or incomplete.")
            return False
            
        # Key appears valid
        logger.debug("OpenAI API key format validation passed")
        return True

    async def _analyze_intent(self, command: str) -> Dict[str, Any]:
        # Check if API key is configured and valid
        if not self.openai_api_key or self.openai_api_key.strip() == "":
            error_msg = "OpenAI API key is missing or empty. Please check your .env file or environment variables."
            logger.error(error_msg)
            raise ValueError(error_msg)
            
        # Additional validation for API key format
        if not self.openai_api_key.startswith("sk-"):
            error_msg = "OpenAI API key has incorrect format. It should start with 'sk-'."
            logger.error(error_msg)
            raise ValueError(error_msg)
            
        if len(self.openai_api_key) < 40:  # Most OpenAI keys are longer than this
            error_msg = "OpenAI API key appears too short. Standard keys are at least 40 characters."
            logger.error(error_msg)
            raise ValueError(error_msg)
        
        # Initialize retry counter and last error
        retries = 0
        last_error = None
        retry_delay = self.retry_delay
        
        # Log the start of intent analysis
        logger.info(f"Starting intent analysis for command: '{command[:50]}{'...' if len(command) > 50 else ''}' using model {self.model}")
        
        # Implement retry logic
        while retries <= self.max_retries:
            try:
                # Attempt to create the completion
                logger.debug(f"Attempt {retries + 1}/{self.max_retries + 1} to analyze intent")
                response = await self.client.chat.completions.create(
                    model=self.model,
                    messages=[
                        {
                            "role": "system",
                            "content": (
                                "Analyze this marketing command and return JSON with:\n"
                                "- \"action\": \"search_influencers\", \"search_daycares\", or \"send_outreach\"\n"
                                "- \"params\": {relevant parameters including \"target_type\" for outreach commands}"
                            )
                        },
                        {"role": "user", "content": command}
                    ],
                    response_format={"type": "json_object"},
                    temperature=0.1
                )
                
                if not response.choices or not response.choices[0].message.content:
                    raise ValueError("OpenAI response missing choices or content")
                
                return json.loads(response.choices[0].message.content)
                
            except requests.exceptions.ConnectionError as ce:
                # Handle connection errors with retry
                last_error = ce
                retries += 1
                
                if retries <= self.max_retries:
                    logger.warning(f"Connection error during intent analysis (attempt {retries}/{self.max_retries}): {str(ce)}")
                    logger.info(f"This could be due to network issues, firewall restrictions, or Railway blocking outbound requests")
                    logger.info(f"Retrying in {retry_delay} seconds...")
                    await asyncio.sleep(retry_delay)
                    # Exponential backoff
                    retry_delay *= 2
                else:
                    logger.error(f"Connection error during intent analysis after {self.max_retries} retries: {str(ce)}")
                    logger.error("Please check your network connection, firewall settings, or deployment environment restrictions")
                    raise ConnectionError(f"Connection error after {self.max_retries} retries: {str(ce)}")
            
            except requests.exceptions.RequestException as re:
                # Handle other request exceptions (timeout, TLS issues, etc)
                last_error = re
                retries += 1
                
                if retries <= self.max_retries:
                    logger.warning(f"Request error during intent analysis (attempt {retries}/{self.max_retries}): {str(re)}")
                    logger.info(f"This could be due to API rate limits, timeouts, or service issues")
                    logger.info(f"Retrying in {retry_delay} seconds...")
                    await asyncio.sleep(retry_delay)
                    # Exponential backoff
                    retry_delay *= 2
                else:
                    logger.error(f"Request error during intent analysis after {self.max_retries} retries: {str(re)}")
                    logger.error("Please check the OpenAI service status or your API usage limits")
                    raise ConnectionError(f"API request error after {self.max_retries} retries: {str(re)}")
            
            except ValueError as ve:
                # Handle value errors (like missing API key or malformed response)
                logger.error(f"Intent analysis failed: {str(ve)}")
                if "API key" in str(ve):
                    logger.error("Please check your OPENAI_API_KEY environment variable or .env file")
                raise
                
            except json.JSONDecodeError as je:
                # Handle JSON parsing errors
                logger.error(f"Failed to parse OpenAI response: {str(je)}")
                logger.error("The API returned a response that couldn't be parsed as JSON")
                raise ValueError(f"Failed to parse OpenAI response: {str(je)}")
                
            except Exception as e:
                # Handle other unexpected errors
                logger.error(f"Intent analysis failed with unexpected error: {type(e).__name__}: {str(e)}")
                logger.error(f"This is an unhandled exception. Please check the logs for more details.")
                raise

    async def process_command(self, command: str) -> Dict[str, Any]:
        try:
            # Validate environment variables first
            if not self._validate_api_key():
                return {
                    "error": "OpenAI API key is missing, empty, or invalid.",
                    "suggestion": "Please check your OPENAI_API_KEY environment variable or .env file. The key should start with 'sk-' and be at least 40 characters long.",
                    "status": "configuration_error"
                }
                
            # Check API connectivity
            logger.info(f"Checking OpenAI API connectivity before processing command: '{command[:50]}{'...' if len(command) > 50 else ''}'")
            if not await self.check_api_connectivity():
                # Check if we're in a restricted environment like Railway
                is_railway = os.getenv('RAILWAY_ENVIRONMENT') is not None
                
                error_message = "Unable to connect to OpenAI API."
                suggestion = "Please check your internet connection and API configuration."
                
                if is_railway:
                    error_message += " This may be due to Railway's outbound request restrictions."
                    suggestion += " You may need to configure Railway to allow outbound connections to the OpenAI API."
                    
                    # Add specific Railway troubleshooting steps
                    suggestion += "\n\nTroubleshooting steps for Railway:\n"
                    suggestion += "1. Verify your Railway project has the 'Public Networking' add-on enabled\n"
                    suggestion += "2. Check that your OpenAI API key is correctly set in Railway environment variables\n"
                    suggestion += "3. Try increasing connection timeouts in your Railway configuration"
                
                # Provide a fallback response for common commands
                fallback_response = self._generate_fallback_response(command)
                
                response = {
                    "error": error_message,
                    "suggestion": suggestion,
                    "status": "connection_error",
                    "environment": "railway" if is_railway else "unknown"
                }
                
                # Add fallback response if available
                if fallback_response:
                    # Use fallback as the primary response with a warning
                    fallback_response["warning"] = "OpenAI API is currently unreachable. Using fallback response with limited functionality."
                    fallback_response["status"] = "using_fallback"
                    fallback_response["environment"] = "railway" if is_railway else "unknown"
                    return fallback_response
                
                return response
                
            # Process the command
            logger.info(f"Processing command: '{command}'")
            intent = await self._analyze_intent(command)

            # Add fallback for missing 'target_type'
            if intent['action'] == 'send_outreach':
                if 'target_type' not in intent['params']:
                    if 'daycare' in command.lower():
                        intent['params']['target_type'] = 'daycare'
                        logger.info("Added missing target_type 'daycare' based on command text")
                    elif 'influencer' in command.lower():
                        intent['params']['target_type'] = 'influencer'
                        logger.info("Added missing target_type 'influencer' based on command text")

            # Handle the intent
            if intent['action'] == 'search_influencers':
                return await self._handle_influencer_search(intent['params'])
            elif intent['action'] == 'search_daycares':
                return await self._handle_daycare_search(intent['params'])
            elif intent['action'] == 'send_outreach':
                return await self._handle_outreach(intent['params'])
            elif intent['action'] == 'export_contacts':
                return await self._handle_export(intent['params'])
            else:
                logger.warning(f"Unsupported action in intent: {intent['action']}")
                return {
                    "error": "Unsupported command",
                    "suggestion": "Try using one of these commands: search for influencers, search for daycares, send outreach emails, or export contacts.",
                    "status": "unsupported_action"
                }
        except ConnectionError as ce:
            logger.error(f"Connection error in command processing: {str(ce)}")
            
            # Check if we're in a restricted environment like Railway
            is_railway = os.getenv('RAILWAY_ENVIRONMENT') is not None
            suggestion = "You can try using a simpler command or check your API configuration."
            
            if is_railway:
                suggestion += " If you're deploying on Railway, make sure outbound connections to the OpenAI API are allowed."
            
            return {
                "error": "Unable to connect to OpenAI API. Please check your internet connection and try again later.",
                "details": str(ce),
                "suggestion": suggestion,
                "status": "connection_error",
                "environment": "railway" if is_railway else "unknown"
            }
        except ValueError as ve:
            if "API key" in str(ve):
                logger.error(f"API key error: {str(ve)}")
                return {
                    "error": "OpenAI API key is missing or invalid.",
                    "details": str(ve),
                    "suggestion": "Please check your OPENAI_API_KEY environment variable or .env file.",
                    "status": "api_key_error"
                }
            else:
                logger.error(f"Value error in command processing: {str(ve)}")
                return {
                    "error": str(ve),
                    "suggestion": "Please check your command format and try again.",
                    "status": "value_error"
                }
        except json.JSONDecodeError as je:
            logger.error(f"JSON decode error in command processing: {str(je)}")
            return {
                "error": "Failed to parse API response.",
                "details": str(je),
                "suggestion": "This is likely a temporary issue with the OpenAI API. Please try again later.",
                "status": "json_error"
            }
        except Exception as e:
            logger.error(f"Command processing failed: {type(e).__name__}: {str(e)}")
            return {
                "error": f"An unexpected error occurred: {str(e)}",
                "suggestion": "Please check the application logs for more details.",
                "status": "unexpected_error",
                "error_type": type(e).__name__
            }

    async def _handle_influencer_search(self, params: Dict[str, Any]) -> Dict[str, Any]:
        query = self.session.query(Influencer)
        if 'country' in params:
            query = query.filter(Influencer.country == params['country'])
        if 'min_followers' in params:
            query = query.filter(Influencer.follower_count >= params['min_followers'])
        influencers = query.all()
        return {
            "influencers": [
                {
                    "name": inf.name,
                    "platform": inf.platform.value if hasattr(inf.platform, 'value') else str(inf.platform),
                    "followers": inf.follower_count,
                    "country": inf.country
                } for inf in influencers
            ]
        }

    async def _handle_daycare_search(self, params: Dict[str, Any]) -> Dict[str, Any]:
        query = self.session.query(Daycare)
        if 'city' in params:
            query = query.filter(func.lower(Daycare.city) == params['city'].lower())
        if 'limit' in params:
            query = query.limit(params['limit'])
        daycares = query.all()
        return {
            "daycares": [
                {
                    "name": dc.name,
                    "city": dc.city,
                    "region": dc.region  # Fixed: region is now a string, not an Enum
                } for dc in daycares
            ]
        }

    async def _handle_outreach(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """Handle outreach campaign commands."""
        try:
            raw_target_type = params.get('target_type', '').lower().strip()

            # Normalize target_type by keyword matching
            if 'daycare' in raw_target_type:
                target_type = 'daycare'
            elif 'influencer' in raw_target_type:
                target_type = 'influencer'
            else:
                raise ValueError(f"Unsupported target_type: {raw_target_type}")

            count = int(params.get('count', 10))
            region = params.get('region')
            custom_subject = params.get('subject')
            custom_body = params.get('body')
            custom_sender = params.get('sender_email')
            custom_sender_name = params.get('sender_name')

            if target_type == 'daycare':
                query = self.session.query(Daycare).filter(Daycare.last_contacted == None)
                if region:
                    query = query.filter(Daycare.region == region)
                targets = query.order_by(func.random()).limit(count).all()

            elif target_type == 'influencer':
                targets = (
                    self.session.query(Influencer)
                    .filter(Influencer.last_contacted == None)
                    .order_by(func.random())
                    .limit(count)
                    .all()
                )
            
            # Set custom email options if provided
            email_options = {}
            if custom_subject:
                email_options['custom_subject'] = custom_subject
            if custom_body:
                email_options['custom_body'] = custom_body
            if custom_sender:
                email_options['sender_email'] = custom_sender
            if custom_sender_name:
                email_options['sender_name'] = custom_sender_name

            results = await self.email_sender.send_batch(targets, target_type, **email_options)

            return {
                "success": True,
                "messages_sent": len(results),
                "details": results
            }

        except Exception as e:
            logger.error(f"Error in outreach campaign: {str(e)}")
            return {"error": str(e)}
    
    async def _handle_export(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """Handle export contacts command."""
        try:
            import csv
            import tempfile
            import os
            from datetime import datetime
            
            target_type = params.get('target_type', '').lower().strip()
            export_format = params.get('format', 'csv').lower().strip()
            region = params.get('region')
            
            if export_format != 'csv':
                return {"error": f"Unsupported export format: {export_format}. Only CSV is currently supported."}
            
            # Create query based on target type
            if 'daycare' in target_type:
                query = self.session.query(Daycare)
                if region:
                    query = query.filter(Daycare.region == region)
                contacts = query.all()
                
                # Define fields for CSV
                fieldnames = ['name', 'address', 'city', 'email', 'phone', 'website', 'region', 'source', 
                             'last_contacted', 'email_opened', 'email_replied', 'created_at', 'updated_at']
                
            elif 'influencer' in target_type:
                query = self.session.query(Influencer)
                if region:
                    query = query.filter(Influencer.country == region)
                contacts = query.all()
                
                # Define fields for CSV
                fieldnames = ['name', 'email', 'platform', 'follower_count', 'country', 'niche', 
                             'last_contacted', 'email_opened', 'email_replied', 'created_at', 'updated_at']
            else:
                return {"error": f"Unsupported target_type: {target_type}. Use 'daycare' or 'influencer'."}
            
            if not contacts:
                return {"error": f"No {target_type}s found matching your criteria."}
            
            # Create a temporary file
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{target_type}s_export_{timestamp}.csv"
            filepath = os.path.join(tempfile.gettempdir(), filename)
            
            # Write data to CSV
            with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for contact in contacts:
                    row = {}
                    for field in fieldnames:
                        value = getattr(contact, field, None)
                        
                        # Handle Enum values
                        if hasattr(value, 'value'):
                            value = value.value
                            
                        # Format datetime objects
                        if isinstance(value, datetime):
                            value = value.strftime("%Y-%m-%d %H:%M:%S")
                            
                        row[field] = value
                    writer.writerow(row)
            
            return {
                "success": True,
                "message": f"Successfully exported {len(contacts)} {target_type}s to CSV",
                "file_path": filepath,
                "file_name": filename,
                "contact_count": len(contacts)
            }
            
        except Exception as e:
            logger.error(f"Error in export contacts: {str(e)}")
            return {"error": str(e)}


    def _generate_fallback_response(self, command: str) -> Dict[str, Any]:
        """
        Generate a fallback response when OpenAI API is unavailable.
        This provides basic functionality for common commands without requiring AI.
        """
        command_lower = command.lower()
        
        # Fallback for influencer search
        if any(term in command_lower for term in ['find influencer', 'search influencer', 'list influencer']):
            try:
                # Extract country if mentioned
                country = None
                for potential_country in ['usa', 'united states', 'france', 'uk', 'canada']:
                    if potential_country in command_lower:
                        country = potential_country.upper()
                        if country == 'UNITED STATES':
                            country = 'USA'
                        break
                
                # Extract follower count if mentioned
                min_followers = 0
                for follower_term in ['k followers', 'k+ followers', 'thousand followers']:
                    if follower_term in command_lower:
                        # Try to extract the number before the term
                        parts = command_lower.split(follower_term)[0].split()
                        if parts:
                            try:
                                num = parts[-1].replace('k', '').strip()
                                min_followers = int(float(num) * 1000)
                            except (ValueError, IndexError):
                                pass
                
                # Query the database directly
                query = self.session.query(Influencer)
                if country:
                    query = query.filter(Influencer.country == country)
                if min_followers > 0:
                    query = query.filter(Influencer.follower_count >= min_followers)
                
                # Limit results
                influencers = query.limit(10).all()
                
                return {
                    "influencers": [
                        {
                            "name": inf.name,
                            "platform": inf.platform.value if hasattr(inf.platform, 'value') else str(inf.platform),
                            "followers": inf.follower_count,
                            "country": inf.country
                        } for inf in influencers
                    ],
                    "note": "This is a fallback response due to OpenAI API connectivity issues. Results may be limited."
                }
            except Exception as e:
                logger.error(f"Error in fallback influencer search: {str(e)}")
                return None
        
        # Fallback for daycare search
        elif any(term in command_lower for term in ['find daycare', 'search daycare', 'list daycare']):
            try:
                # Extract region if mentioned
                region = None
                for potential_region in ['usa', 'united states', 'france']:
                    if potential_region in command_lower:
                        region = potential_region.upper()
                        if region == 'UNITED STATES':
                            region = 'USA'
                        break
                
                # Extract city if mentioned
                city = None
                common_cities = ['new york', 'paris', 'los angeles', 'chicago', 'san francisco', 'boston', 'seattle']
                for potential_city in common_cities:
                    if potential_city in command_lower:
                        city = potential_city.title()
                        break
                
                # Query the database directly
                query = self.session.query(Daycare)
                if region:
                    query = query.filter(Daycare.region == region)
                if city:
                    query = query.filter(Daycare.city.ilike(f'%{city}%'))
                
                # Limit results
                daycares = query.limit(10).all()
                
                return {
                    "daycares": [
                        {
                            "name": dc.name,
                            "city": dc.city,
                            "region": dc.region
                        } for dc in daycares
                    ],
                    "note": "This is a fallback response due to OpenAI API connectivity issues. Results may be limited."
                }
            except Exception as e:
                logger.error(f"Error in fallback daycare search: {str(e)}")
                return None
        
        # No fallback available for this command
        return None

# Testable script (optional)
if __name__ == '__main__':
    from ..database.models import init_db

    async def main():
        session = init_db()
        assistant = AIAssistant(session)
        commands = [
            "Find all influencers in France with 10k+ followers",
            "List top 10 daycares in New York",
            "Send outreach email to 50 random USA daycares"
        ]
        for command in commands:
            try:
                result = await assistant.process_command(command)
                print(f"Command: {command}")
                print(f"Result: {result}\n")
            except Exception as e:
                print(f"Error processing '{command}': {str(e)}")

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "Event loop is closed" not in str(e):
            raise
